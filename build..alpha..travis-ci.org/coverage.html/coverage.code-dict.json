{"/home/travis/build/npmtest/node-npmtest-svg4everybody/test.js":"/* istanbul instrument in package npmtest_svg4everybody */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-svg4everybody/lib.npmtest_svg4everybody.js":"/* istanbul instrument in package npmtest_svg4everybody */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_svg4everybody = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_svg4everybody = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-svg4everybody/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-svg4everybody && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_svg4everybody */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_svg4everybody\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_svg4everybody.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_svg4everybody.rollup.js'] =\n            local.assetsDict['/assets.npmtest_svg4everybody.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_svg4everybody.__dirname + '/lib.npmtest_svg4everybody.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-svg4everybody/node_modules/svg4everybody/dist/svg4everybody.js":"!function(root, factory) {\n    \"function\" == typeof define && define.amd ? // AMD. Register as an anonymous module unless amdModuleId is set\n    define([], function() {\n        return root.svg4everybody = factory();\n    }) : \"object\" == typeof module && module.exports ? // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory() : root.svg4everybody = factory();\n}(this, function() {\n    /*! svg4everybody v2.1.8 | github.com/jonathantneal/svg4everybody */\n    function embed(parent, svg, target) {\n        // if the target exists\n        if (target) {\n            // create a document fragment to hold the contents of the target\n            var fragment = document.createDocumentFragment(), viewBox = !svg.hasAttribute(\"viewBox\") && target.getAttribute(\"viewBox\");\n            // conditionally set the viewBox on the svg\n            viewBox && svg.setAttribute(\"viewBox\", viewBox);\n            // copy the contents of the clone into the fragment\n            for (// clone the target\n            var clone = target.cloneNode(!0); clone.childNodes.length; ) {\n                fragment.appendChild(clone.firstChild);\n            }\n            // append the fragment into the svg\n            parent.appendChild(fragment);\n        }\n    }\n    function loadreadystatechange(xhr) {\n        // listen to changes in the request\n        xhr.onreadystatechange = function() {\n            // if the request is ready\n            if (4 === xhr.readyState) {\n                // get the cached html document\n                var cachedDocument = xhr._cachedDocument;\n                // ensure the cached html document based on the xhr response\n                cachedDocument || (cachedDocument = xhr._cachedDocument = document.implementation.createHTMLDocument(\"\"), \n                cachedDocument.body.innerHTML = xhr.responseText, xhr._cachedTarget = {}), // clear the xhr embeds list and embed each item\n                xhr._embeds.splice(0).map(function(item) {\n                    // get the cached target\n                    var target = xhr._cachedTarget[item.id];\n                    // ensure the cached target\n                    target || (target = xhr._cachedTarget[item.id] = cachedDocument.getElementById(item.id)), \n                    // embed the target into the svg\n                    embed(item.parent, item.svg, target);\n                });\n            }\n        }, // test the ready state change immediately\n        xhr.onreadystatechange();\n    }\n    function svg4everybody(rawopts) {\n        function oninterval() {\n            // while the index exists in the live <use> collection\n            for (// get the cached <use> index\n            var index = 0; index < uses.length; ) {\n                // get the current <use>\n                var use = uses[index], parent = use.parentNode, svg = getSVGAncestor(parent);\n                if (svg) {\n                    var src = use.getAttribute(\"xlink:href\") || use.getAttribute(\"href\");\n                    !src && opts.attributeName && (src = use.getAttribute(opts.attributeName));\n                    if (polyfill) {\n                        if (!opts.validate || opts.validate(src, svg, use)) {\n                            // remove the <use> element\n                            parent.removeChild(use);\n                            // parse the src and get the url and id\n                            var srcSplit = src.split(\"#\"), url = srcSplit.shift(), id = srcSplit.join(\"#\");\n                            // if the link is external\n                            if (url.length) {\n                                // get the cached xhr request\n                                var xhr = requests[url];\n                                // ensure the xhr request exists\n                                xhr || (xhr = requests[url] = new XMLHttpRequest(), xhr.open(\"GET\", url), xhr.send(), \n                                xhr._embeds = []), // add the svg and id as an item to the xhr embeds list\n                                xhr._embeds.push({\n                                    parent: parent,\n                                    svg: svg,\n                                    id: id\n                                }), // prepare the xhr ready state change event\n                                loadreadystatechange(xhr);\n                            } else {\n                                // embed the local id into the svg\n                                embed(parent, svg, document.getElementById(id));\n                            }\n                        } else {\n                            // increase the index when the previous value was not \"valid\"\n                            ++index, ++numberOfSvgUseElementsToBypass;\n                        }\n                    }\n                } else {\n                    // increase the index when the previous value was not \"valid\"\n                    ++index;\n                }\n            }\n            // continue the interval\n            (!uses.length || uses.length - numberOfSvgUseElementsToBypass > 0) && requestAnimationFrame(oninterval, 67);\n        }\n        var polyfill, opts = Object(rawopts), newerIEUA = /\\bTrident\\/[567]\\b|\\bMSIE (?:9|10)\\.0\\b/, webkitUA = /\\bAppleWebKit\\/(\\d+)\\b/, olderEdgeUA = /\\bEdge\\/12\\.(\\d+)\\b/, edgeUA = /\\bEdge\\/.(\\d+)\\b/, inIframe = window.top !== window.self;\n        polyfill = \"polyfill\" in opts ? opts.polyfill : newerIEUA.test(navigator.userAgent) || (navigator.userAgent.match(olderEdgeUA) || [])[1] < 10547 || (navigator.userAgent.match(webkitUA) || [])[1] < 537 || edgeUA.test(navigator.userAgent) && inIframe;\n        // create xhr requests object\n        var requests = {}, requestAnimationFrame = window.requestAnimationFrame || setTimeout, uses = document.getElementsByTagName(\"use\"), numberOfSvgUseElementsToBypass = 0;\n        // conditionally start the interval if the polyfill is active\n        polyfill && oninterval();\n    }\n    function getSVGAncestor(node) {\n        for (var svg = node; \"svg\" !== svg.nodeName.toLowerCase() && (svg = svg.parentNode); ) {}\n        return svg;\n    }\n    return svg4everybody;\n});","/home/travis/build/npmtest/node-npmtest-svg4everybody/node_modules/svg4everybody/Gruntfile.js":"module.exports = function (grunt) {\n\tgrunt.initConfig({\n\t\tpkg: grunt.file.readJSON('package.json'),\n\t\teslint: {\n\t\t\tgruntfile: {\n\t\t\t\toptions: {\n\t\t\t\t\trules: {\n\t\t\t\t\t\tcamelcase: [0],\n\t\t\t\t\t\t'global-require': [0]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tfiles: {\n\t\t\t\t\tsrc: ['Gruntfile.js']\n\t\t\t\t}\n\t\t\t},\n\t\t\tbuildfile: {\n\t\t\t\toptions: {\n\t\t\t\t\tglobals: ['LEGACY_SUPPORT', 'svg4everybody'],\n\t\t\t\t\trules: {\n\t\t\t\t\t\t'no-magic-numbers': [0],\n\t\t\t\t\t\t'no-unused-vars': [0]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tfiles: {\n\t\t\t\t\tsrc: ['lib/svg4everybody.js']\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tjscs: {\n\t\t\tgruntfile: {\n\t\t\t\toptions: {\n\t\t\t\t\trequireCamelCaseOrUpperCaseIdentifiers: null\n\t\t\t\t},\n\t\t\t\tfiles: {\n\t\t\t\t\tsrc: ['Gruntfile.js']\n\t\t\t\t}\n\t\t\t},\n\t\t\tbuildfile: {\n\t\t\t\tfiles: {\n\t\t\t\t\tsrc: ['lib/svg4everybody.js']\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tuglify: {\n\t\t\tbuild: {\n\t\t\t\tfiles: {\n\t\t\t\t\t'dist/svg4everybody.js': ['dist/svg4everybody.legacy.js']\n\t\t\t\t},\n\t\t\t\toptions: {\n\t\t\t\t\tbeautify: {\n\t\t\t\t\t\tbeautify: true,\n\t\t\t\t\t\tbracketize: true\n\t\t\t\t\t},\n\t\t\t\t\tcompress: {\n\t\t\t\t\t\tglobal_defs: {\n\t\t\t\t\t\t\tLEGACY_SUPPORT: false\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tmangle: false,\n\t\t\t\t\tpreserveComments: 'some'\n\t\t\t\t}\n\t\t\t},\n\t\t\tbuildmin: {\n\t\t\t\tfiles: {\n\t\t\t\t\t'dist/svg4everybody.min.js': ['dist/svg4everybody.legacy.js']\n\t\t\t\t},\n\t\t\t\toptions: {\n\t\t\t\t\tcompress: {\n\t\t\t\t\t\tglobal_defs: {\n\t\t\t\t\t\t\tLEGACY_SUPPORT: false\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tmangle: true,\n\t\t\t\t\tpreserveComments: false\n\t\t\t\t}\n\t\t\t},\n\t\t\tlegacy: {\n\t\t\t\tfiles: {\n\t\t\t\t\t'dist/svg4everybody.legacy.js': ['dist/svg4everybody.legacy.js']\n\t\t\t\t},\n\t\t\t\toptions: {\n\t\t\t\t\tbeautify: {\n\t\t\t\t\t\tbeautify: true,\n\t\t\t\t\t\tbracketize: true\n\t\t\t\t\t},\n\t\t\t\t\tcompress: {\n\t\t\t\t\t\tglobal_defs: {\n\t\t\t\t\t\t\tLEGACY_SUPPORT: true\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tmangle: false,\n\t\t\t\t\tpreserveComments: 'some'\n\t\t\t\t}\n\t\t\t},\n\t\t\tlegacymin: {\n\t\t\t\tfiles: {\n\t\t\t\t\t'dist/svg4everybody.legacy.min.js': ['dist/svg4everybody.legacy.js']\n\t\t\t\t},\n\t\t\t\toptions: {\n\t\t\t\t\tcompress: {\n\t\t\t\t\t\tglobal_defs: {\n\t\t\t\t\t\t\tLEGACY_SUPPORT: true\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tmangle: true,\n\t\t\t\t\tpreserveComments: false\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tumd: {\n\t\t\tbuild: {\n\t\t\t\toptions: {\n\t\t\t\t\tsrc: 'lib/svg4everybody.js',\n\t\t\t\t\tdest: 'dist/svg4everybody.legacy.js',\n\t\t\t\t\tglobalAlias: 'svg4everybody',\n\t\t\t\t\tobjectToExport: 'svg4everybody'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\twatch:  {\n\t\t\tfiles: ['lib/svg4everybody.js'],\n\t\t\ttasks: ['test', 'build']\n\t\t}\n\t});\n\n\trequire('load-grunt-tasks')(grunt);\n\n\t// npm run test\n\tgrunt.registerTask('test', ['eslint', 'jscs']);\n\n\t// npm run build, grunt build\n\tgrunt.registerTask('build', ['test', 'umd', 'uglify']);\n\n\t// npm run watch, grunt build:watch\n\tgrunt.registerTask('build:watch', ['build', 'watch']);\n\n\t// grunt\n\tgrunt.registerTask('default', ['build']);\n};\n","/home/travis/build/npmtest/node-npmtest-svg4everybody/node_modules/svg4everybody/lib/svg4everybody.js":"/*! svg4everybody v2.1.8 | github.com/jonathantneal/svg4everybody */\n\nfunction embed(parent, svg, target) {\n\t// if the target exists\n\tif (target) {\n\t\t// create a document fragment to hold the contents of the target\n\t\tvar fragment = document.createDocumentFragment();\n\n\t\t// cache the closest matching viewBox\n\t\tvar viewBox = !svg.hasAttribute('viewBox') && target.getAttribute('viewBox');\n\n\t\t// conditionally set the viewBox on the svg\n\t\tif (viewBox) {\n\t\t\tsvg.setAttribute('viewBox', viewBox);\n\t\t}\n\n\t\t// clone the target\n\t\tvar clone = target.cloneNode(true);\n\n\t\t// copy the contents of the clone into the fragment\n\t\twhile (clone.childNodes.length) {\n\t\t\tfragment.appendChild(clone.firstChild);\n\t\t}\n\n\t\t// append the fragment into the svg\n\t\tparent.appendChild(fragment);\n\t}\n}\n\nfunction loadreadystatechange(xhr) {\n\t// listen to changes in the request\n\txhr.onreadystatechange = function () {\n\t\t// if the request is ready\n\t\tif (xhr.readyState === 4) {\n\t\t\t// get the cached html document\n\t\t\tvar cachedDocument = xhr._cachedDocument;\n\n\t\t\t// ensure the cached html document based on the xhr response\n\t\t\tif (!cachedDocument) {\n\t\t\t\tcachedDocument = xhr._cachedDocument = document.implementation.createHTMLDocument('');\n\n\t\t\t\tcachedDocument.body.innerHTML = xhr.responseText;\n\n\t\t\t\txhr._cachedTarget = {};\n\t\t\t}\n\n\t\t\t// clear the xhr embeds list and embed each item\n\t\t\txhr._embeds.splice(0).map(function (item) {\n\t\t\t\t// get the cached target\n\t\t\t\tvar target = xhr._cachedTarget[item.id];\n\n\t\t\t\t// ensure the cached target\n\t\t\t\tif (!target) {\n\t\t\t\t\ttarget = xhr._cachedTarget[item.id] = cachedDocument.getElementById(item.id);\n\t\t\t\t}\n\n\t\t\t\t// embed the target into the svg\n\t\t\t\tembed(item.parent, item.svg, target);\n\t\t\t});\n\t\t}\n\t};\n\n\t// test the ready state change immediately\n\txhr.onreadystatechange();\n}\n\nfunction svg4everybody(rawopts) {\n\tvar opts = Object(rawopts);\n\n\t// create legacy support variables\n\tvar nosvg;\n\tvar fallback;\n\n\t// if running with legacy support\n\tif (LEGACY_SUPPORT) {\n\t\t// configure the fallback method\n\t\tfallback = opts.fallback || function (src) {\n\t\t\treturn src.replace(/\\?[^#]+/, '').replace('#', '.').replace(/^\\./, '') + '.png' + (/\\?[^#]+/.exec(src) || [''])[0];\n\t\t};\n\n\t\t// set whether to shiv <svg> and <use> elements and use image fallbacks\n\t\tnosvg = 'nosvg' in opts ? opts.nosvg : /\\bMSIE [1-8]\\b/.test(navigator.userAgent);\n\n\t\t// conditionally shiv <svg> and <use>\n\t\tif (nosvg) {\n\t\t\tdocument.createElement('svg');\n\t\t\tdocument.createElement('use');\n\t\t}\n\t}\n\n\t// set whether the polyfill will be activated or not\n\tvar polyfill;\n\tvar olderIEUA = /\\bMSIE [1-8]\\.0\\b/;\n\tvar newerIEUA = /\\bTrident\\/[567]\\b|\\bMSIE (?:9|10)\\.0\\b/;\n\tvar webkitUA = /\\bAppleWebKit\\/(\\d+)\\b/;\n\tvar olderEdgeUA = /\\bEdge\\/12\\.(\\d+)\\b/;\n\tvar edgeUA = /\\bEdge\\/.(\\d+)\\b/;\n\t//Checks whether iframed\n\tvar inIframe = window.top !== window.self;\n\n\tif ('polyfill' in opts) {\n\t\tpolyfill = opts.polyfill;\n\t} else if (LEGACY_SUPPORT) {\n\t\tpolyfill = olderIEUA.test(navigator.userAgent) || newerIEUA.test(navigator.userAgent) || (navigator.userAgent.match(olderEdgeUA) || [])[1] < 10547 || (navigator.userAgent.match(webkitUA) || [])[1] < 537 || edgeUA.test(navigator.userAgent) && inIframe;\n\t} else {\n\t\tpolyfill = newerIEUA.test(navigator.userAgent) || (navigator.userAgent.match(olderEdgeUA) || [])[1] < 10547 || (navigator.userAgent.match(webkitUA) || [])[1] < 537 || edgeUA.test(navigator.userAgent) && inIframe;\n\t}\n\n\t// create xhr requests object\n\tvar requests = {};\n\n\t// use request animation frame or a timeout to search the dom for svgs\n\tvar requestAnimationFrame = window.requestAnimationFrame || setTimeout;\n\n\t// get a live collection of use elements on the page\n\tvar uses = document.getElementsByTagName('use');\n\tvar numberOfSvgUseElementsToBypass = 0;\n\n\tfunction oninterval() {\n\t\t// get the cached <use> index\n\t\tvar index = 0;\n\n\t\t// while the index exists in the live <use> collection\n\t\twhile (index < uses.length) {\n\t\t\t// get the current <use>\n\t\t\tvar use = uses[index];\n\n\t\t\t// get the current <svg>\n\t\t\tvar parent = use.parentNode;\n\t\t\tvar svg = getSVGAncestor(parent);\n\n\t\t\tif (svg) {\n\t\t\t\tvar src = use.getAttribute('xlink:href') || use.getAttribute('href');\n\n\t\t\t\tif (!src && opts.attributeName) {\n\t\t\t\t\tsrc = use.getAttribute(opts.attributeName);\n\t\t\t\t}\n\n\t\t\t\t// if running with legacy support\n\t\t\t\tif (LEGACY_SUPPORT && nosvg) {\n\t\t\t\t\t// create a new fallback image\n\t\t\t\t\tvar img = document.createElement('img');\n\n\t\t\t\t\t// force display in older IE\n\t\t\t\t\timg.style.cssText = 'display:inline-block;height:100%;width:100%';\n\n\t\t\t\t\t// set the fallback size using the svg size\n\t\t\t\t\timg.setAttribute('width', svg.getAttribute('width') || svg.clientWidth);\n\t\t\t\t\timg.setAttribute('height', svg.getAttribute('height') || svg.clientHeight);\n\n\t\t\t\t\t// set the fallback src\n\t\t\t\t\timg.src = fallback(src, svg, use);\n\n\t\t\t\t\t// replace the <use> with the fallback image\n\t\t\t\t\tparent.replaceChild(img, use);\n\t\t\t\t} else if (polyfill) {\n\t\t\t\t\tif (!opts.validate || opts.validate(src, svg, use)) {\n\t\t\t\t\t\t// remove the <use> element\n\t\t\t\t\t\tparent.removeChild(use);\n\n\t\t\t\t\t\t// parse the src and get the url and id\n\t\t\t\t\t\tvar srcSplit = src.split('#');\n\t\t\t\t\t\tvar url = srcSplit.shift();\n\t\t\t\t\t\tvar id = srcSplit.join('#');\n\n\t\t\t\t\t\t// if the link is external\n\t\t\t\t\t\tif (url.length) {\n\t\t\t\t\t\t\t// get the cached xhr request\n\t\t\t\t\t\t\tvar xhr = requests[url];\n\n\t\t\t\t\t\t\t// ensure the xhr request exists\n\t\t\t\t\t\t\tif (!xhr) {\n\t\t\t\t\t\t\t\txhr = requests[url] = new XMLHttpRequest();\n\n\t\t\t\t\t\t\t\txhr.open('GET', url);\n\n\t\t\t\t\t\t\t\txhr.send();\n\n\t\t\t\t\t\t\t\txhr._embeds = [];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// add the svg and id as an item to the xhr embeds list\n\t\t\t\t\t\t\txhr._embeds.push({\n\t\t\t\t\t\t\t\tparent: parent,\n\t\t\t\t\t\t\t\tsvg: svg,\n\t\t\t\t\t\t\t\tid: id\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// prepare the xhr ready state change event\n\t\t\t\t\t\t\tloadreadystatechange(xhr);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// embed the local id into the svg\n\t\t\t\t\t\t\tembed(parent, svg, document.getElementById(id));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// increase the index when the previous value was not \"valid\"\n\t\t\t\t\t\t++index;\n\t\t\t\t\t\t++numberOfSvgUseElementsToBypass;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// increase the index when the previous value was not \"valid\"\n\t\t\t\t++index;\n\t\t\t}\n\t\t}\n\n\t\t// continue the interval\n\t\tif (!uses.length || uses.length - numberOfSvgUseElementsToBypass > 0) {\n\t\t\trequestAnimationFrame(oninterval, 67);\n\t\t}\n\t}\n\n\t// conditionally start the interval if the polyfill is active\n\tif (polyfill) {\n\t\toninterval();\n\t}\n}\n\nfunction getSVGAncestor(node) {\n\tvar svg = node;\n\twhile (svg.nodeName.toLowerCase() !== 'svg') {\n\t\tsvg = svg.parentNode;\n\t\tif (!svg) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn svg;\n}\n"}